## Enum ##
No los podemos usar porque la BD da errores al intentar almacenarlos.

## Reserva ##
- Una Reserva no tiene margen, eso lo tienes sus subclases. De hecho este es un atributo estático de las clases hijas, y además es privado para que solo pueda modificarlo el administrador al pasar por el método de 'setMargen()'. Para obtener el margen, basta con llamar al setter sobre una instancia de la 'ReservaHotel'.
Ref.: http://stackoverflow.com/questions/3911278/inherit-a-static-variable-in-java

- Aunque la reserva sea algo que no deberíamos de poder instanciar (deberíamos de ponerla como abstracta), hemos tenido que hacerla como una clase que podemos instanciar porque QuickDB no soporta la herencia de clases abstractas.


## Confirmar, cancelar ##
- En vez de poner confirmar() y cancelar(), hemos tenido que poner setEstado() porque QuickDB necesita setters para todos los atributos.


## Dberíamos haber puesto como final ##
- Los atributos de información de cada uno de los tipos de reserva, pero entonces no podemos poner los setter necesarios para QuickDB.

-----------------------

## JUnit ##
En las pruebas de catálogo, cerramos la BD antes de cada método porque casi todos los métodos requieren esta acción.

